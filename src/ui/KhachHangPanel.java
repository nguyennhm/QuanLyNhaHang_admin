package ui;

import dao.KhachHangDAO;
import dao.XepHangKhachHangDAO;
import model.KhachHang;
import utils.JDBCUtil;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class KhachHangPanel extends JPanel {
    private JTable table;
    private KhachHangDAO khachHangDAO;

    public KhachHangPanel() {
        khachHangDAO = new KhachHangDAO(JDBCUtil.getConnection());

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createTitledBorder("Danh s√°ch kh√°ch h√†ng"));

        table = createNonEditableTable();
        reloadTable();
        add(new JScrollPane(table), BorderLayout.CENTER);

        JButton btnThem = new JButton("‚ûï Th√™m kh√°ch h√†ng");
        btnThem.addActionListener(e -> showAddForm());

        JButton btnXoa = new JButton("üóë X√≥a kh√°ch h√†ng");
        btnXoa.addActionListener(e -> xoaKhachHang());

        JButton btnCongDiem = new JButton("üéØ C·ªông ƒëi·ªÉm");
        btnCongDiem.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                int id = (int) table.getValueAt(selectedRow, 0);
                showAddPointForm(id);
            } else {
                JOptionPane.showMessageDialog(this, "‚ö† Vui l√≤ng ch·ªçn kh√°ch h√†ng ƒë·ªÉ c·ªông ƒëi·ªÉm!");
            }
        });

        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        btnPanel.add(btnThem);
        btnPanel.add(btnXoa);
        btnPanel.add(btnCongDiem);
        add(btnPanel, BorderLayout.SOUTH);

        // Add double-click listener only if not already added
        if (table.getMouseListeners().length == 1) { // ch·ªâ c√≥ default JTableHeader
            table.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        int row = table.rowAtPoint(evt.getPoint());
                        if (row >= 0) {
                            int id = (int) table.getValueAt(row, 0);
                            showDetailForm(id);
                        }
                    }
                }
            });
        }
    }

    public void reloadTable() {
        List<KhachHang> list = khachHangDAO.getAllKhachHang();
        String[] cols = {"ID", "H·ªç t√™n", "SƒêT", "ƒêi·ªÉm t√≠ch l≈©y", "C·∫•p b·∫≠c", "Sinh nh·∫≠t"};
        Object[][] data = new Object[list.size()][cols.length];
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        for (int i = 0; i < list.size(); i++) {
            KhachHang kh = list.get(i);
            data[i][0] = kh.getId();
            data[i][1] = kh.getHoTen();
            data[i][2] = kh.getSoDienThoai();
            data[i][3] = kh.getDiemTichLuy();
            data[i][4] = kh.getCapBac();
            data[i][5] = kh.getSinhNhat() != null ? sdf.format(kh.getSinhNhat()) : "";
        }

        DefaultTableModel model = new DefaultTableModel(data, cols) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        table.setModel(model);
    }

    private void showAddForm() {
        JDialog f = new JDialog(SwingUtilities.getWindowAncestor(this), "Th√™m kh√°ch h√†ng", Dialog.ModalityType.APPLICATION_MODAL);
        f.setSize(400, 350);
        f.setLocationRelativeTo(this);
        f.setLayout(new BorderLayout());

        JPanel formPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        JTextField tfHoTen = new JTextField();
        JTextField tfSdt = new JTextField();
        JTextField tfDiemTichLuy = new JTextField("0");
        JLabel lblCapBac = new JLabel("Th∆∞·ªùng"); // M·∫∑c ƒë·ªãnh c·∫•p b·∫≠c l√† "Th∆∞·ªùng"
        JTextField tfSinhNhat = new JTextField("dd/MM/yyyy");

        formPanel.add(new JLabel("H·ªç t√™n:")); formPanel.add(tfHoTen);
        formPanel.add(new JLabel("S·ªë ƒëi·ªán tho·∫°i:")); formPanel.add(tfSdt);
        formPanel.add(new JLabel("ƒêi·ªÉm t√≠ch l≈©y:")); formPanel.add(tfDiemTichLuy);
        formPanel.add(new JLabel("C·∫•p b·∫≠c:")); formPanel.add(lblCapBac);
        formPanel.add(new JLabel("Sinh nh·∫≠t:")); formPanel.add(tfSinhNhat);

        JButton btnLuu = new JButton("L∆∞u");
        btnLuu.addActionListener(e -> {
            try {
                KhachHang kh = new KhachHang();
                kh.setHoTen(tfHoTen.getText().trim());
                kh.setSoDienThoai(tfSdt.getText().trim());
                kh.setDiemTichLuy(Integer.parseInt(tfDiemTichLuy.getText().trim()));
                kh.setCapBac("Th∆∞·ªùng"); // Kh√¥ng cho ch·ªçn, lu√¥n m·∫∑c ƒë·ªãnh
                String sinhNhatStr = tfSinhNhat.getText().trim();
                if (!sinhNhatStr.isEmpty()) {
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    sdf.setLenient(false);
                    kh.setSinhNhat(sdf.parse(sinhNhatStr));
                }

                boolean ok = khachHangDAO.themKhachHang(kh);
                if (ok) {
                    reloadTable();
                    f.dispose();
                    JOptionPane.showMessageDialog(this, "Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
                } else {
                    JOptionPane.showMessageDialog(f, "Th√™m kh√°ch h√†ng th·∫•t b·∫°i!");
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(f, "ƒêi·ªÉm t√≠ch l≈©y ph·∫£i l√† s·ªë nguy√™n!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(f, "L·ªói d·ªØ li·ªáu: " + ex.getMessage());
            }
        });

        JPanel bottom = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottom.add(btnLuu);

        f.add(formPanel, BorderLayout.CENTER);
        f.add(bottom, BorderLayout.SOUTH);
        f.setVisible(true);
    }

    public void showDetailForm(int khachHangId) {
        KhachHang kh = khachHangDAO.getKhachHangById(khachHangId);

        JDialog f = new JDialog(SwingUtilities.getWindowAncestor(this), "Chi ti·∫øt kh√°ch h√†ng", Dialog.ModalityType.APPLICATION_MODAL);
        f.setSize(400, 350);
        f.setLocationRelativeTo(this);
        f.setLayout(new BorderLayout());

        JPanel formPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        JTextField tfHoTen = new JTextField(kh.getHoTen());
        JTextField tfSdt = new JTextField(kh.getSoDienThoai());
        JTextField tfDiemTichLuy = new JTextField(String.valueOf(kh.getDiemTichLuy()));
        JLabel lblCapBac = new JLabel(kh.getCapBac()); // ch·ªâ hi·ªÉn th·ªã c·∫•p b·∫≠c
        JTextField tfSinhNhat = new JTextField(kh.getSinhNhat() != null ? new SimpleDateFormat("dd/MM/yyyy").format(kh.getSinhNhat()) : "");

        lblCapBac.setFont(lblCapBac.getFont().deriveFont(Font.BOLD));
        lblCapBac.setForeground(Color.BLUE);

        formPanel.add(new JLabel("H·ªç t√™n:")); formPanel.add(tfHoTen);
        formPanel.add(new JLabel("S·ªë ƒëi·ªán tho·∫°i:")); formPanel.add(tfSdt);
        formPanel.add(new JLabel("ƒêi·ªÉm t√≠ch l≈©y:")); formPanel.add(tfDiemTichLuy);
        formPanel.add(new JLabel("C·∫•p b·∫≠c:")); formPanel.add(lblCapBac); // Kh√¥ng cho ch·ªânh s·ª≠a
        formPanel.add(new JLabel("Sinh nh·∫≠t:")); formPanel.add(tfSinhNhat);

        JButton btnLuu = new JButton("C·∫≠p nh·∫≠t");
        btnLuu.addActionListener(e -> {
            try {
                kh.setHoTen(tfHoTen.getText().trim());
                kh.setSoDienThoai(tfSdt.getText().trim());
                kh.setDiemTichLuy(Integer.parseInt(tfDiemTichLuy.getText().trim()));
                // Kh√¥ng set l·∫°i c·∫•p b·∫≠c th·ªß c√¥ng!
                String sinhNhatStr = tfSinhNhat.getText().trim();
                if (!sinhNhatStr.isEmpty()) {
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    sdf.setLenient(false);
                    kh.setSinhNhat(sdf.parse(sinhNhatStr));
                } else {
                    kh.setSinhNhat(null);
                }

                boolean ok = khachHangDAO.capNhatKhachHang(kh);
                if (ok) {
                    reloadTable();
                    f.dispose();
                    JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                } else {
                    JOptionPane.showMessageDialog(f, "C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(f, "ƒêi·ªÉm t√≠ch l≈©y ph·∫£i l√† s·ªë nguy√™n!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(f, "L·ªói d·ªØ li·ªáu: " + ex.getMessage());
            }
        });

        JPanel bottom = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottom.add(btnLuu);

        f.add(formPanel, BorderLayout.CENTER);
        f.add(bottom, BorderLayout.SOUTH);
        f.setVisible(true);
    }

    private void showAddPointForm(int khachHangId) {
        KhachHang kh = khachHangDAO.getKhachHangById(khachHangId);

        JDialog f = new JDialog(SwingUtilities.getWindowAncestor(this), "C·ªông ƒëi·ªÉm cho kh√°ch h√†ng: " + kh.getHoTen(), Dialog.ModalityType.APPLICATION_MODAL);
        f.setSize(400, 200);
        f.setLocationRelativeTo(this);
        f.setLayout(new BorderLayout());

        JPanel formPanel = new JPanel(new GridLayout(3, 2, 10, 10));
        JTextField tfSoTien = new JTextField("0");
        JLabel lblDiemHienTai = new JLabel("ƒêi·ªÉm hi·ªán t·∫°i: " + kh.getDiemTichLuy());
        JComboBox<String> cbPhanTram = new JComboBox<>(new String[]{"10%", "20%", "50%", "100%"});

        formPanel.add(new JLabel("S·ªë ti·ªÅn chi ti√™u:")); formPanel.add(tfSoTien);
        formPanel.add(new JLabel("T·ª∑ l·ªá quy ƒë·ªïi:")); formPanel.add(cbPhanTram);
        formPanel.add(lblDiemHienTai);

        JButton btnCong = new JButton("C·ªông ƒëi·ªÉm");
        btnCong.addActionListener(e -> {
            try {
                double soTien = Double.parseDouble(tfSoTien.getText().trim());
                String phanTram = (String) cbPhanTram.getSelectedItem();
                double tyLe = Double.parseDouble(phanTram.replace("%", "")) / 100;
                int diemCong = (int) (soTien * tyLe / 1000);
                int diemMoi = kh.getDiemTichLuy() + diemCong;

                kh.setDiemTichLuy(diemMoi);
                int xepHangId = new XepHangKhachHangDAO(JDBCUtil.getConnection()).getXepHangIdByDiem(diemMoi);
                kh.setCapBac(new XepHangKhachHangDAO(JDBCUtil.getConnection()).getCapBacById(xepHangId));

                boolean ok = khachHangDAO.capNhatKhachHang(kh);
                if (ok) {
                    reloadTable();
                    f.dispose();
                    JOptionPane.showMessageDialog(this, "C·ªông " + diemCong + " ƒëi·ªÉm th√†nh c√¥ng! ƒêi·ªÉm m·ªõi: " + diemMoi);
                } else {
                    JOptionPane.showMessageDialog(f, "C·ªông ƒëi·ªÉm th·∫•t b·∫°i!");
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(f, "S·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(f, "L·ªói: " + ex.getMessage());
            }
        });

        JPanel bottom = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottom.add(btnCong);

        f.add(formPanel, BorderLayout.CENTER);
        f.add(bottom, BorderLayout.SOUTH);
        f.setVisible(true);
    }

    private void xoaKhachHang() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "‚ö† Vui l√≤ng ch·ªçn kh√°ch h√†ng c·∫ßn x√≥a.");
            return;
        }

        int id = (int) table.getValueAt(selectedRow, 0);
        String ten = table.getValueAt(selectedRow, 1).toString();

        int confirm = JOptionPane.showConfirmDialog(this,
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng \"" + ten + "\"?",
                "X√°c nh·∫≠n x√≥a", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean ok = khachHangDAO.xoaKhachHang(id);
            if (ok) {
                JOptionPane.showMessageDialog(this, "‚úÖ ƒê√£ x√≥a kh√°ch h√†ng.");
                reloadTable();
            } else {
                JOptionPane.showMessageDialog(this, "‚ùå Kh√¥ng th·ªÉ x√≥a. Kh√°ch h√†ng c√≥ th·ªÉ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
            }
        }
    }

    private JTable createNonEditableTable() {
        JTable t = new JTable();
        JTableHeader header = t.getTableHeader();
        header.setReorderingAllowed(false);
        return t;
    }

    public JTable getTable() {
        return table;
    }
}
